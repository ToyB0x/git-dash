on:
  workflow_call:
    inputs:
      environment:
        default: 'development'
        required: true
        type: string

env:
  VITE_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.VITE_PUBLIC_FIREBASE_PROJECT_ID }}
  VITE_PUBLIC_FIREBASE_BROWSER_API_KEY: ${{ secrets.VITE_PUBLIC_FIREBASE_BROWSER_API_KEY }}
  VITE_PUBLIC_API_SERVER_URL: ${{ secrets.VITE_PUBLIC_API_SERVER_URL }}
  VITE_PUBLIC_LOG_ROCKET_ID: ${{ vars.VITE_PUBLIC_LOG_ROCKET_ID }} # org/project

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Check out
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Enable corepack for pnpm
        run: npm install -g corepack@latest && corepack enable pnpm

      - name: Setup & Restore Node cache
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4
        with:
          cache: 'pnpm'
          node-version-file: 'package.json'

      - name: Install all packages
        run: pnpm install --frozen-lockfile

      - name: Restore turbo cache
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4
        with:
          path: .turbo/cache
          key:
            turbo/${{ github.job }}/${{ github.ref_name }}/${{ github.sha }}
          restore-keys: |
            turbo/${{ github.job }}/${{ github.ref_name }}/
            turbo/${{ github.job }}/

      - name: Type check
        run: pnpm typecheck

      - name: Build check
        run: pnpm build

      - name: migrate api db
        run: pnpm db:apply:${{ inputs.environment }}
        working-directory: packages/db-api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: deploy api
        run: pnpm deploy:${{ inputs.environment }}
        working-directory: apps/api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: deploy web
        run: pnpm deploy:${{ inputs.environment }}
        working-directory: apps/web
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
